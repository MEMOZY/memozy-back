name: CI/CD Pipeline

# main 브랜치에 push 또는 pull request가 발생할 때 실행
# feature/{feature-name} : 새로운 기능이나 버그 수정 작업 브랜치
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_NAME: memozy-back
  BUCKET_NAME: memozy-bucket
  CODE_DEPLOY_APP_NAME: memozy
  DEPLOYMENT_GROUP_NAME: memozy-group

jobs:
  build:
    runs-on: ubuntu-latest

    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Create application.yml
        run: echo "${{ secrets.APPLICATION_PROD_YML }}" > src/main/resources/application.yml

      - name: Generate docker-compose.yml from GitHub Secret
        run: |
          echo "${{ secrets.DOCKER_COMPOSE_PROD_YML }}" > docker-compose.yml

      # gradlew 파일 실행권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 빌드 시작
      - name: Build with Gradle
        run: ./gradlew build -x test

      # aws 접근 id, key
      - name: Configure AWS credentials
        if: github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker Image Build And Push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:prod}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            docker pull ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:prod
            docker stop spring || true
            docker rm spring || true
            docker compose -f /home/ubuntu/memozy-back/docker-compose.yml up -d